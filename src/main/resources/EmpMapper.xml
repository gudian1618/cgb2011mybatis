<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="EmpMapper">
<!--不同的mapper文件对应的namespace值应该保证唯一-->
<!--    通过select,update,insert,delete标签声明只要执行的SQL语句-->
<!--    练习1:查询emp表中的所有员工信息id用于指定一个唯一的编号,要求id值在当前文件中不能重复,
resultType用于指定一个类型,用该类型封装sql语句查询的结果
即使最终返回的是集合,也只需要指定集合中的泛型即可-->
    <select id="findAll" resultType="com.github.gudian1618.cgb2011mybatis.pojo.Emp">
        select * from emp
    </select>

    <!--练习2:新增员工信息-->
    <insert id="insert">
        insert into emp value(null, '刘德华','歌手',8888)
    </insert>

    <!--练习3:修改员工信息-->
    <update id="update">
        update emp set job='演员',salary=88888 where name ='刘德华'
    </update>

    <!--练习4:删除员工信息-->
    <delete id="delete">
        delete from emp where name ='刘德华'
    </delete>

    <!--练习5:查询制定id的员工信息-->
    <select id="findById" resultType="com.github.gudian1618.cgb2011mybatis.pojo.Emp">
        select * from emp where id=#{id}
    </select>

    <!--练习6:新增员工信息:张飞java开发工程师15000-->
    <!--如果传过来的参数是用map,替换占位符,执行插入操作-->
    <update id="insert2">
        insert into emp value(null,#{name},#{job},#{salary});
    </update>

    <!--如果传来的参数是用Emp对象封装的,将会通过占位符中的名称拼接出-->
    <!--对应的get方法,获取emp中的对应的属性值-->
    <update id="insert3">
        insert into emp value(null,#{name},#{job},#{salary});
    </update>

    <!--删除-->
    <delete id="delete2" parameterType="String">
        delete from emp where id=#{id}
    </delete>

</mapper>
